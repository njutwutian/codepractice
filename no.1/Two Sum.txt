Two Sum
Given an array of integers, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.

You may assume that each input would have exactly one solution.

Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2

c# 
/////////
//List   Time Limit Exceeded 
/////////
/*
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
            if (nums.Length >= 2)
            {
                List<Entity> list = new List<Entity>();
                for (int i = 0; i < nums.Length;i++ )
                {
                    Entity entity = new Entity();
                    entity.Key = i;
                    entity.Value = nums[i];
                    list.Add(entity);
                }
                for (int i = 0; i < nums.Length; i++)
                {
                    Entity entity = list.Find(e => (target - e.Value) == nums[i]);
                    if(entity != null&&entity.Key != i)
                    {
                        return  new int[] { i+1, entity.Key+1 } ;
                    }
                }
            }
            return new int[] { 0,0};
    }
}
public class Entity
{
    public int Key {get;set;}
    public int Value {get;set;}
}
*/

////////
//Dictionary Line 42: System.ArgumentException: An element with the same key already exists in the dictionary. [0,4,3,0] 0
// key  num   value  i
////////
/*
public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        if(nums.Length > 1)
        {
            Dictionary<int,int> tempDic = new Dictionary<int,int>(); 
            for(int i = 0; i< nums.Length;i++)
            {
                tempDic.Add(nums[i],i);
            }
            for(int i = 0; i< nums.Length;i++)
            {
                if(tempDic[target-nums[i]]!=i&&tempDic.ContainsKey(target-nums[i]))
                {
                    return new int[]{i+1,tempDic[target-nums[i]]+1};
                }
            }
        }
        return new int[]{0,0};
    }
}
*/

////////
//Dictionary   accepted
// key  num   value  i
////////

public class Solution {
    public int[] TwoSum(int[] nums, int target) {
        Dictionary<int,int> dic = new Dictionary<int,int>();
        for(int i = 0; i < nums.Length; i++){
            if (dic.ContainsKey(target - nums[i])){
                return new int[]{dic[target - nums[i]] + 1, i + 1};
            }
            if (dic.ContainsKey(nums[i])){
                dic[nums[i]] = i;
            }
            else{
                dic.Add(nums[i], i);
            }
        }
        return new int[]{0,0};
    }
}














